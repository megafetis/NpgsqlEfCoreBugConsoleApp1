// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace NpgsqlEfCoreBugConsoleApp1.CompiledModels
{
    public partial class MainDbContextModel
    {
        partial void Initialize()
        {
            var someInterestingArticle = SomeInterestingArticleEntityType.Create(this);

            SomeInterestingArticleEntityType.CreateAnnotations(someInterestingArticle);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.5");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var someInterestingArticle = FindEntityType("NpgsqlEfCoreBugConsoleApp1.SomeInterestingArticle")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            someInterestingArticle.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var npgsqlEfCoreBugConsoleApp1SomeInterestingArticleTableBase = new TableBase("NpgsqlEfCoreBugConsoleApp1.SomeInterestingArticle", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "text", npgsqlEfCoreBugConsoleApp1SomeInterestingArticleTableBase);
            npgsqlEfCoreBugConsoleApp1SomeInterestingArticleTableBase.Columns.Add("Id", idColumnBase);
            var tagsColumnBase = new ColumnBase<ColumnMappingBase>("Tags", "text[]", npgsqlEfCoreBugConsoleApp1SomeInterestingArticleTableBase);
            npgsqlEfCoreBugConsoleApp1SomeInterestingArticleTableBase.Columns.Add("Tags", tagsColumnBase);
            var titleColumnBase = new ColumnBase<ColumnMappingBase>("Title", "text", npgsqlEfCoreBugConsoleApp1SomeInterestingArticleTableBase);
            npgsqlEfCoreBugConsoleApp1SomeInterestingArticleTableBase.Columns.Add("Title", titleColumnBase);
            relationalModel.DefaultTables.Add("NpgsqlEfCoreBugConsoleApp1.SomeInterestingArticle", npgsqlEfCoreBugConsoleApp1SomeInterestingArticleTableBase);
            var npgsqlEfCoreBugConsoleApp1SomeInterestingArticleMappingBase = new TableMappingBase<ColumnMappingBase>(someInterestingArticle, npgsqlEfCoreBugConsoleApp1SomeInterestingArticleTableBase, true);
            npgsqlEfCoreBugConsoleApp1SomeInterestingArticleTableBase.AddTypeMapping(npgsqlEfCoreBugConsoleApp1SomeInterestingArticleMappingBase, false);
            defaultTableMappings.Add(npgsqlEfCoreBugConsoleApp1SomeInterestingArticleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, someInterestingArticle.FindProperty("Id")!, npgsqlEfCoreBugConsoleApp1SomeInterestingArticleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tagsColumnBase, someInterestingArticle.FindProperty("Tags")!, npgsqlEfCoreBugConsoleApp1SomeInterestingArticleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase, someInterestingArticle.FindProperty("Title")!, npgsqlEfCoreBugConsoleApp1SomeInterestingArticleMappingBase);

            var tableMappings = new List<TableMapping>();
            someInterestingArticle.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var articlesTable = new Table("Articles", null, relationalModel);
            var idColumn = new Column("Id", "text", articlesTable);
            articlesTable.Columns.Add("Id", idColumn);
            var tagsColumn = new Column("Tags", "text[]", articlesTable);
            articlesTable.Columns.Add("Tags", tagsColumn);
            var titleColumn = new Column("Title", "text", articlesTable);
            articlesTable.Columns.Add("Title", titleColumn);
            var pK_Articles = new UniqueConstraint("PK_Articles", articlesTable, new[] { idColumn });
            articlesTable.PrimaryKey = pK_Articles;
            var pK_ArticlesUc = RelationalModel.GetKey(this,
                "NpgsqlEfCoreBugConsoleApp1.SomeInterestingArticle",
                new[] { "Id" });
            pK_Articles.MappedKeys.Add(pK_ArticlesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ArticlesUc).Add(pK_Articles);
            articlesTable.UniqueConstraints.Add("PK_Articles", pK_Articles);
            relationalModel.Tables.Add(("Articles", null), articlesTable);
            var articlesTableMapping = new TableMapping(someInterestingArticle, articlesTable, true);
            articlesTable.AddTypeMapping(articlesTableMapping, false);
            tableMappings.Add(articlesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, someInterestingArticle.FindProperty("Id")!, articlesTableMapping);
            RelationalModel.CreateColumnMapping(tagsColumn, someInterestingArticle.FindProperty("Tags")!, articlesTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn, someInterestingArticle.FindProperty("Title")!, articlesTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
